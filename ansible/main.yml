---
- hosts: all
  become: yes
  gather_facts: yes

  vars:
    - container_prefix: "test-container-"
    - lxc_templates:
      - ubuntu
      - debian
      - alpine
      - centos
      - fedora
    - db_user:
        name: "example_user"
        password: "passw0rd"
    - package_version:
        nodejs_version: 6.x
        phantomjs_version: "2.1.1"
        ruby_version: 2.4.2
        molecule_version: '2.3.1'
        vagrant: 2.0.1
        phpmyadmin: "4.7.4"

  roles:
    - role: geerlingguy.nfs
      tags:
        - packer
    - role: geerlingguy.packer-debian
      tags:
        - packer
    - role: tersmitten.locales
      locales_present:
        - en_US.UTF-8
        - de_DE.UTF-8
      locales_language_packs_present:
        - language-pack-en
        - language-pack-en-base
        - language-pack-de
        - language-pack-de-base
      locales_default:
        lang: de_DE.UTF-8
        # language: de_DE.UTF-8
      tags:
        - locale_de
    - role: tersmitten.timezone
      timezone_zone: "Etc/UTC"
      tags:
        - locale_de
    - role: gantsign.keyboard
      keyboard_model: pc105
      keyboard_layout: de
      tags:
        - locale_de

    # Install and configure Git version control
    - role: franklinkim.git
      become: yes
      git_config:
        core:
          autocrlf: input
        alias:
          ls: 'log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate'
          ll: 'log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat'
          lds: 'log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short'
          lt: 'log --oneline --graph --decorate --all'
          cane: 'git commit --amend --no-edit'
          rom: 'rebase origin/master'
      tags:
        - git
    # Add lcx development
    - role: cmprescott.dnsmasq
      dnsmasq_dns_interfaces: []
      tags:
        - lxc-dev
    - role: toopy.lxc-dev
      lxc_config_path: "/var/lib/lxc/"
      tags:
        - lxc-dev
    # Add Node.js
    - role: geerlingguy.nodejs
      nodejs_version: "{{package_version.nodejs_version}}"
      nodejs_install_npm_user: vagrant
      nodejs_npm_global_packages:
        - name: grunt-cli
        - name: grunt-init
        - name: gulp-cli
        - name: npm-check-updates
        - name: typescript
        - name: ts-node
        - name: typings
        - name: pm2
        - name: socket.io
        - name: sqlite3
        - name: mongoose
        - name: mysql
        - name: express
        - name: javascripting
        - name: how-to-npm
        - name: scope-chains-closures
        - name: stream-adventure
        - name: how-to-markdown
        - name: learnyouhtml
        - name: learnyounode
        - name: functional-javascript-workshop
        - name: bytewiser
        - name: expressworks
        - name: bug-clinic
        - name: async-you
        - name: test-anything
        - name: learnyoumongo
        - name: torrential
        - name: html-validator-cli
      tags:
        - nodejs

    - role: tersmitten.pip
      tags:
        - python-dev

    - role: tersmitten.virtualenv
      tags:
        - python-dev

    - role: tersmitten.ansible
      tags:
        - ansible

    - role: gantsign.xdesktop
      xdesktop_desktop: unity
      tags:
        - desktop

    - role: gantsign.lightdm
      lightdm_autologin_user: vagrant
      tags:
        - desktop

    # Install Terminator terminal emulator
    - role: gantsign.terminator
      tags:
        - desktop

    # Install Google Chrome web broswer
    - role: cmprescott.chrome
      tags:
        - desktop
        - chrome

    # Set the default web browser
    # This is only a partial solution as Google Chrome will still ask if you
    # want to make it the default browser when it first runs.
    - role: gantsign.default-web-browser
      tags:
        - desktop
        - chrome
      default_web_browser: google-chrome

    - role: nicolai86.phantomjs
      tags:
        - web-dev
        #
      phantomjs_version: "{{package_version.phantomjs_version}}"
      phantomjs_url: "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-{{phantomjs_version}}-linux-x86_64.tar.bz2"

    #
    # Install Atom editor
    - role: gantsign.atom
      tags:
        - desktop
        - atom
      users:
        - username: vagrant
          atom_packages:
            - editorconfig
            - minimap
            - linter
            - linter-ui-default
            - busy-signal
            - intentions
            - atom-beautify
            - file-icons
            - atom-ide-ui
            - ide-typescript
            - ide-json
            - ide-yaml
            - ide-css
            - ide-html
            - ide-python
            - atom-jinja2
            - autocomplete-ansible
            - linter-ansible-linting
            - platformio-ide-terminal
          atom_config:
            "*":
              core:
                projectHome: "/home/vagrant/workspace"
              editor:
                showIndentGuide: true
                showInvisibles: true

    # Install Go package for Atom
    - role: gantsign.atom-packages
      tags:
        - desktop
        - atom
        - golang
      users:
        - username: vagrant
          atom_packages:
            - go-plus

    # Install Go language SDK
    - role: gantsign.golang
      tags:
        - golang
      golang_gopath: '$HOME/workspace-go'

    - role: tschifftner.firefox
      tags:
        - desktop
      firefox_language: 'de'
      firefox_os: 'linux-x86_64'

    - role: geerlingguy.java
      when: "ansible_os_family == 'Debian'"
      java_packages:
        - openjdk-8-jdk
      tags:
        - java

    - role: geerlingguy.ruby
      become: yes
      ruby_install_gems_user: vagrant
      ruby_install_from_source: true
      ruby_version: "{{package_version.ruby_version}}"
      ruby_download_url: "http://cache.ruby-lang.org/pub/ruby/2.4/ruby-{{ruby_version}}.tar.gz"
      ruby_install_gems:
        - inspec
        - serverspec
        - capybara
        - selenium-webdriver
        - cucumber
        - rspec
        - sinatra
        - poltergeist
        - rspec-expectations
        - launchy
        - rest-client
        - test-kitchen
        - kitchen-ansible
        - kitchen-salt
        - kitchen-vagrant
        - kitchen-docker
        - kitchen-sync
        - kitchen-verifier-serverspec
        - kitchen-lxc
        - kitchen-inspec
        - fog
        - foodcritic
        - thor-foodcritic
      tags:
        - ruby

#    # Install Java JDK 8
#    - role: gantsign.java
#      tags:
#        - java
#
#      java_version: 8u144
#      java_license_declaration: 'I accept the "Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX" under the terms at http://www.oracle.com/technetwork/java/javase/terms/license/index.html'

    # Install Java JDK 9
#    - role: gantsign.java
#      tags:
#        - java
#
#      java_version: '9+181'
#      java_is_default_installation: no
#      java_fact_group_name: java_9
#      java_license_declaration: 'I accept the "Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX" under the terms at http://www.oracle.com/technetwork/java/javase/terms/license/index.html'

#    # Configure Java environment variables
#    - role: franklinkim.environment
#      tags:
#        - java
#
#      environment_config:
#        JAVA_HOME: "{{ ansible_local.java.general.home }}"

    - role: arknoll.selenium
      selenium_install_firefox: yes
      tags:
        - web-dev

    - role: geerlingguy.mysql
      become: yes
      mysql_user_name: root
      mysql_user_password: root
      mysql_databases:
      - name: example_db
        encoding: latin1
        collation: latin1_general_ci
      mysql_users:
      - name: "{{db_user.name}}"
        host: "%"
        password: "{{db_user.password}}"
        priv: "example_db.*:ALL"
      tags:
        - db_mysql

    - role: geerlingguy.nginx
      nginx_remove_default_vhost: true
      nginx_vhosts:
        #
        - listen: "80 default_server"
          server_name: "_"
          root: "/var/www/html"
          index: "index.php index.html index.htm index.nginx-debian.html"
          error_log: ""
          state: "present"
          template: "{{ nginx_vhost_template }}"
          filename: "default.conf"
          extra_parameters: |
            location / {
                try_files $uri $uri/ /index.html /index.php;
            }
            location ~ ^/~(?<userdir_user>[\w-]+)(?<userdir_uri>/.*)?$ {
                alias /home/$userdir_user/www$userdir_uri;
            	# autoindex on;
                location ~ [^/]\.php(/|$) {
                    include fastcgi_params;
                    fastcgi_index index.php;
                    # check if requested PHP file really exists
                    if (!-f $request_filename) {
                        return 404;
                    }
                    #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                    fastcgi_split_path_info ^(.+\.php)(/.+)$;
                    fastcgi_param SCRIPT_FILENAME $request_filename;
                    fastcgi_pass 127.0.0.1:9000;
                }
            }
            location ~ [^/]\.php$ {
                include fastcgi_params;
                fastcgi_index index.php;
                # check if requested PHP file really exists
                if (!-f $request_filename) {
                    return 404;
                }
                #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_param SCRIPT_FILENAME $request_filename;
                fastcgi_pass 127.0.0.1:9000;
            }
            # deny access to .htaccess files, if Apache's document root
            # concurs with nginx's one
            location ~ /\.ht {
                deny all;
            }
            ## Begin - Security
            # deny all direct access for these folders
            location ~* /(.git|cache|bin|logs|backups|tests)/.*$ { return 403; }
            # deny running scripts inside core system folders
            location ~* /(system|vendor)/.*\.(txt|xml|md|html|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }
            # deny running scripts inside user folder
            location ~* /user/.*\.(txt|md|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }
            # deny access to specific files in the root folder
            location ~ /(LICENSE.txt|composer.lock|composer.json|nginx.conf|web.config|htaccess.txt|\.htaccess) { return 403; }
      tags:
        - db_mysql


    - role: geerlingguy.php
      php_webserver_daemon: "nginx"
      php_enable_php_fpm: true
      tags:
        - db_mysql


    - role: geerlingguy.php-mysql
      tags:
        - db_mysql


    - role: greendayonfire.mongodb
      mongodb_security_authorization: "enabled"
      mongodb_users:
      - name: "{{db_user.name}}"
        password: "{{db_user.password}}"
        roles: readWrite
        database: app_development
      tags:
        - no_sql

    # Install Docker
    - role: angstwad.docker_ubuntu
      tags:
        - docker
      docker_group_members:
        - vagrant

    # Install Kubernetes
    - role: gantsign.kubernetes
      tags:
        - kubernetes
        - docker
      kubernetes_node_type: admin

    # Install Molecule for testing Ansible roles & playbooks
    - role: gantsign.molecule
      molecule_version: "{{package_version.molecule_version}}"
      tags:
        - docker
        - molecule

    - role: wtanaka.vagrant
      vagrant_url: "https://releases.hashicorp.com/vagrant/{{package_version.vagrant}}/vagrant_{{package_version.vagrant}}_x86_64.deb"
      tags:
        - vagrant


  tasks:
    - name: "Install needed packages"
      apt:
        name: "{{ item }}"
        state: installed
      with_items:
        - git
        - git-flow
        - build-essential
        - automake
        - wget
        - curl
        - vim
        - screen
        - htop
        - tree
        - sqlite
        - lvm2
        - python3
        - python3-pip
        - python3-virtualenv
        - python3-dev
        - python3-pexpect
        - python-pexpect
        - python3-winrm
        - python-winrm
        - libffi-dev
        - libssl-dev
        - cowsay
        - sshpass
        - avahi-daemon
        - avahi-utils
        - nmap

    - name: "Install lxc-dev needed packages"
      apt:
        name: "{{ item }}"
        state: installed
      with_items:
        - yum
        - rpm
        # - zypper
        - qemu-user-static
      tags:
        - lxc-dev

    - name: "Install desktop needed packages"
      apt:
        name: "{{ item }}"
        state: installed
      with_items:
        - hunspell-de-ch
        - wogerman
        - hunspell-de-at
        - hunspell-en-us
        - wbritish
        - hunspell-de-de
        - language-pack-gnome-de
        - wngerman
        - hunspell-en-au
        - wswiss
        - hunspell-en-za
        - hunspell-en-ca
        - wamerican
        - hunspell-en-gb
        - file-roller
      tags:
        - desktop

    - name: Create a stopped container
      lxc_container:
        name: "{{container_prefix}}{{item}}"
        container_log: true
        template: "{{item}}"
        state: stopped
      with_items: "{{lxc_templates}}"
      tags:
        - lxc-dev

    - name: Remove container
      lxc_container:
        name: "{{container_prefix}}{{item}}"
        container_log: true
        template: "{{item}}"
        state: absent
      with_items: "{{lxc_templates}}"
      tags:
        - lxc-dev

    - name: pull an docker images
      docker_image:
        name: "{{item}}"
      with_items:
        - gitlab/gitlab-ce
      tags:
        - docker

    - name: Start gitlab container
      docker_container:
        name: gitlab
        hostname: gitlab.rdf-dev
        image: gitlab/gitlab-ce
        state: started
        detach: yes
        restart_policy: always
        ports:
          - "8443:443"
          - "8080:80"
          - "2222:22"
        volumes:
          - /vagrant/gitlab/config:/etc/gitlab
          - /vagrant/gitlab/logs:/var/log/gitlab
          - /vagrant/gitlab/data:/var/opt/gitlab
      tags:
         - docker
         - testing

    - name: configure screen
      lineinfile:
        path: /etc/screenrc
        regexp: '^caption always'
        line: 'caption always "%{rw} * | %H * $LOGNAME | %{bw}%c %D | %{-}%-Lw%{rw}%50>%{rW}%n%f* %t %{-}%+Lw%<"'
      tags:
        - rdf

    - name: configure bashrc with screen
      blockinfile:
        path: /home/vagrant/.bashrc
        block: |
          if [ "$TERM" != "screen" ] && [ "$SSH_CONNECTION" != "" ]; then
            /usr/bin/screen -ls sshscreen || /usr/bin/screen -dmS sshscreen
            echo "SSH no active"
            /usr/bin/screen -S sshscreen -D -RR  && exit
          fi
      tags:
        - rdf

    - name: Ensure rdf directories exists
      become: yes
      become_user: vagrant
      file:
        path: "/home/vagrant/rdf/{{item}}"
        state: directory
        owner: vagrant
        group: vagrant
        recurse: yes
      with_items:
        - ais
        - bsa
        - itec
        - ina
      tags:
        - rdf

    - name: Git config
      become: yes
      become_user: vagrant
      git_config:
        name: "{{item.name}}"
        value: "{{item.value}}"
        scope: global
      with_items:
        - {
            name: "user.email",
            value: "vagrant@example.com"
        }
        - {
            name: "user.name",
            value: "vagrant"
        }
        - {
            name: "core.editor",
            value: "vim"
        }
        - {
            name: "push.default",
            value: "simple"
        }
      tags:
        - git

    - name: Clone git
      become_user: vagrant
      become: yes
      git:
        dest: "/home/vagrant/rdf/{{item.path}}/{{item.repo}}"
        force: yes
        repo: "https://github.com/kraeml/{{item.repo}}.git"
        version: "{{item.version}}"
      with_items:
        - repo: hands-on-ansible
          path: ais
          version: master
        - repo: hands-on-bsa
          path: bsa
          version: master
        - repo: python_routine_aufgaben
          bath: itec
          version: master
      tags:
        - rdf

    - name: OWC File Transfer
      become: yes
      become_user: vagrant
      unarchive:
          dest: "/home/vagrant/rdf/ina/"
          src: https://cloud.franken.de/owncloud/index.php/s/j0vW45mnASmJCFk/download
          creates: /home/vagrant/rdf/ina/hands-on-ina
          remote_src: yes
          exclude: ".git"
          keep_newer: yes
          owner: vagrant
          group: vagrant
      with_items:
        - src: /tmp/hands-on-ina
          path: ina/hands-on-ina
      tags:
        - rdf

    - name: Install phpmyadmin
      vars:
        version: "{{package_version.phpmyadmin}}"
      unarchive:
        src: https://files.phpmyadmin.net/phpMyAdmin/{{version}}/phpMyAdmin-{{version}}-all-languages.tar.gz
        dest: /var/www/html/
        owner: www-data
        group: www-data
        remote_src: yes
      tags:
        - db_mysql

    - name: Link to phpmyadmin
      vars:
         version: "{{package_version.phpmyadmin}}"
      file:
        state: link
        src: /var/www/html/phpMyAdmin-{{version}}-all-languages
        dest: /var/www/html/phpmyadmin
      tags:
        - db_mysql

    - name: Copy phpmyadmin config
      become: yes
      ignore_errors: true
      get_url:
        url: https://cloud.franken.de/owncloud/index.php/s/zPpINpJHLXwSb0u/download
        dest: /var/www/html/phpmyadmin/config.inc.php
        owner: www-data
        group: www-data
        mode: 0664
      tags:
        - db_mysql

    - name: Get RDF files from owncloud
      become: yes
      get_url:
          dest: "/home/vagrant/rdf/{{item.dest}}"
          url: "{{item.url}}"
          owner: vagrant
          group: vagrant
      with_items:
        - url: https://cloud.franken.de/owncloud/index.php/s/Bg6uuMolM5SJha0/download
          dest: bsa/
        - url: https://cloud.franken.de/owncloud/index.php/s/C0oBcCf7q4ODsPd/download
          dest: itec/
      tags:
        - rdf

    - name: Install jupyter
      block:
      - name: jupyter packages
        apt:
            name: "{{item}}"
        with_items:
          - libncurses5-dev
          - python-dev
          - python3-dev
          - python3-pip
          - pandoc
      - name: jupyter via pip
        pip:
            executable: pip3
            name: "{{item}}"
        with_items:
          - jupyter
          - readline
          - ipyparallel
          - bash_kernel
          - ipython-sql
          - ihtml
          - ExpectException
          - RISE

      - name: Insall bash kernel
        command: /usr/bin/python3 -m bash_kernel.install
      - name: Enable jupyter widgetsnbextension
        command: jupyter nbextension enable --py --sys-prefix widgetsnbextension
      - name: Get jupyter config script
        get_url:
            dest: /tmp/configure_jupyter.sh
            url: https://cloud.franken.de/owncloud/index.php/s/I6Vs9u803LAQZ9R/download
            owner: vagrant
            group: vagrant
            mode: 0774
      - name: Ensure jupyter config is set
        script: /tmp/configure_jupyter.sh
        args:
            creates: /home/vagrant/.jupyter/jupyter_notebook_config.py
        become: yes
        become_user: vagrant
      - name: Copy jupyter config
        become: yes
        get_url:
            url: https://cloud.franken.de/owncloud/index.php/s/xSQvKOHH64Z0W45/download
            dest: /lib/systemd/system/jupyter.service
            owner: root
            group: root
            mode: 0644
      - name: Enable Jupyter
        become: yes
        service:
            name: jupyter
            enabled: yes
      - name: Install js kernel
        become: yes
        npm:
            global: yes
            name: ijavascript
      - name: Install javascript kernel
        command: ijsinstall --install=global
        become: yes

      - name: Ensure RISE installed
        become: yes
        command: jupyter-nbextension install rise --py --sys-prefix
        args:
          creates: /usr/local/share/jupyter/nbextensions/rise/
        register: jupyter_rise

      - name: Ensure RISE enabled
        become: yes
        command: jupyter-nbextension enable rise --py --sys-prefix
        when: jupyter_rise.changed
        
      - name: Restart Jupyter
        become: yes
        service:
            name: jupyter
            state: restarted
      tags:
        - jupyter
