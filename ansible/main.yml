---
- hosts: all
  #become: yes
  gather_facts: yes

  vars:
    - container_prefix: "test-container-"
    - lxc_templates:
      - ubuntu
      - debian
      - alpine
      - centos
      - fedora
    - db_user:
        name: "example_user"
        password: "passw0rd"
    - package_version:
        nodejs_version: 6.x
        phantomjs_version: "2.1.1"
        ruby_version: 2.4.3
        molecule_version: '2.7.0'
        vagrant: 2.0.2
        phpmyadmin: "4.7.7"

  roles:
    - role: geerlingguy.nfs
      become: yes
      tags:
        - packer
    - role: geerlingguy.packer-debian
      become: yes
      tags:
        - packer
    - role: tersmitten.locales
      become: yes
      locales_present:
        - en_US.UTF-8
        - de_DE.UTF-8
      locales_language_packs_present:
        - language-pack-en
        - language-pack-en-base
        - language-pack-de
        - language-pack-de-base
      locales_default:
        lang: de_DE.UTF-8
        # language: de_DE.UTF-8
      tags:
        - locale_de
    - role: tersmitten.timezone
      become: yes
      timezone_zone: "Etc/UTC"
      tags:
        - locale_de
    - role: gantsign.keyboard
      become: yes
      keyboard_model: pc105
      keyboard_layout: de
      tags:
        - locale_de

    - role: franklinkim.git
      become: yes
      git_config:
        core:
          autocrlf: input
        alias:
          ls: 'log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate'
          ll: 'log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat'
          lds: 'log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short'
          lt: 'log --oneline --graph --decorate --all'
          cane: 'git commit --amend --no-edit'
          rom: 'rebase origin/master'
      tags:
        - git

    # Add Node.js
    - role: geerlingguy.nodejs
      become: yes
      nodejs_version: "{{package_version.nodejs_version}}"
      nodejs_install_npm_user: vagrant
      nodejs_npm_global_packages:
        - name: grunt-cli
        - name: grunt-init
        - name: gulp-cli
        - name: npm-check-updates
        - name: typescript
        - name: ts-node
        - name: typings
        - name: pm2
        - name: socket.io
        - name: sqlite3
        - name: mongoose
        - name: mysql
        - name: express
        - name: javascripting
        - name: how-to-npm
        - name: scope-chains-closures
        - name: stream-adventure
        - name: how-to-markdown
        - name: learnyouhtml
        - name: learnyounode
        - name: functional-javascript-workshop
        - name: bytewiser
        - name: expressworks
        - name: bug-clinic
        - name: async-you
        - name: test-anything
        - name: learnyoumongo
        - name: torrential
        - name: html-validator-cli
      tags:
        - nodejs

    - role: tersmitten.pip
      become: yes
      tags:
        - python-dev

    - role: tersmitten.virtualenv
      become: yes
      tags:
        - python-dev

    - role: kraeml.jupyter
      become: yes
      nodejs_version: "{{package_version.nodejs_version}}"
      npm_config_unsafe_perm: "true"
      notebook_dir: "{{ansible_user_dir}}"
      tags:
        - python-dev
        - jupyter

    - role: tersmitten.ansible
      become: yes
      tags:
        - ansible
        - not_packer

    - role: gantsign.xdesktop
      become: yes
      xdesktop_desktop: unity
      tags:
        - desktop

    - role: gantsign.lightdm
      become: yes
      lightdm_autologin_user: vagrant
      tags:
        - desktop

    # Install Terminator terminal emulator
    - role: gantsign.terminator
      become: yes
      tags:
        - desktop

    # Install Google Chrome web broswer
    - role: cmprescott.chrome
      become: yes
      tags:
        - desktop
        - chrome

    # Set the default web browser
    # This is only a partial solution as Google Chrome will still ask if you
    # want to make it the default browser when it first runs.
    - role: gantsign.default-web-browser
      tags:
        - desktop
        - chrome
      default_web_browser: google-chrome

    - role: nicolai86.phantomjs
      become: yes
      tags:
        - web-dev
        #
      phantomjs_version: "{{package_version.phantomjs_version}}"
      phantomjs_url: "https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-{{phantomjs_version}}-linux-x86_64.tar.bz2"

    #
    # Install Atom editor
    - role: gantsign.atom
      become: yes
      users:
        - username: vagrant
          atom_packages:
            - editorconfig
            - minimap
            - linter
            - linter-ui-default
            - busy-signal
            - intentions
            - atom-beautify
            - file-icons
            - atom-ide-ui
            - ide-typescript
            - ide-json
            - ide-yaml
            - ide-css
            - ide-html
            - ide-python
            - atom-jinja2
            - autocomplete-ansible
            - linter-ansible-linting
            - platformio-ide-terminal
            - platformio-ide
            - platformio-ide-debugger
          atom_config:
            "*":
              core:
                projectHome: "/home/vagrant/workspace"
              editor:
                showIndentGuide: true
                showInvisibles: true
      tags:
        - desktop
        - atom

    # Install Go package for Atom
    - role: gantsign.atom-packages
      become: yes
      tags:
        - desktop
        - atom
        - golang
      users:
        - username: vagrant
          atom_packages:
            - go-plus

    # Install Go language SDK
    - role: gantsign.golang
      become: yes
      tags:
        - golang
      golang_gopath: '$HOME/workspace-go'

    - role: tschifftner.firefox
      become: yes
      tags:
        - desktop
      firefox_language: 'de'
      firefox_os: 'linux-x86_64'
      firefox_version: '58.0.1'

    - role: geerlingguy.java
      become: yes
      when: "ansible_os_family == 'Debian'"
      java_packages:
        - openjdk-8-jdk
      tags:
        - java

    - role: geerlingguy.ruby
      become: yes
      ruby_install_gems_user: vagrant
      ruby_install_from_source: true
      ruby_version: "{{package_version.ruby_version}}"
      ruby_download_url: "http://cache.ruby-lang.org/pub/ruby/2.4/ruby-{{ruby_version}}.tar.gz"
      ruby_install_gems:
        - inspec
        - serverspec
        - capybara
        - selenium-webdriver
        - cucumber
        - rspec
        - sinatra
        - poltergeist
        - rspec-expectations
        - launchy
        - rest-client
        - test-kitchen
        - kitchen-ansible
        - kitchen-salt
        - kitchen-vagrant
        - kitchen-docker
        - kitchen-sync
        - kitchen-verifier-serverspec
        - kitchen-lxc
        - kitchen-inspec
        - fog
        - foodcritic
        - thor-foodcritic
      tags:
        - ruby

#    # Install Java JDK 8
#    - role: gantsign.java
#      tags:
#        - java
#
#      java_version: 8u144
#      java_license_declaration: 'I accept the "Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX" under the terms at http://www.oracle.com/technetwork/java/javase/terms/license/index.html'

    # Install Java JDK 9
#    - role: gantsign.java
#      tags:
#        - java
#
#      java_version: '9+181'
#      java_is_default_installation: no
#      java_fact_group_name: java_9
#      java_license_declaration: 'I accept the "Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX" under the terms at http://www.oracle.com/technetwork/java/javase/terms/license/index.html'

#    # Configure Java environment variables
#    - role: franklinkim.environment
#      tags:
#        - java
#
#      environment_config:
#        JAVA_HOME: "{{ ansible_local.java.general.home }}"

    - role: arknoll.selenium
      become: yes
      selenium_install_firefox: yes
      tags:
        - web-dev

    - role: geerlingguy.mysql
      become: yes
      mysql_user_name: root
      mysql_user_password: root
      mysql_databases:
      - name: example_db
        encoding: latin1
        collation: latin1_general_ci
      mysql_users:
      - name: "{{db_user.name}}"
        host: "%"
        password: "{{db_user.password}}"
        priv: "example_db.*:ALL"
      tags:
        - db_mysql

    - role: geerlingguy.nginx
      become: yes
      nginx_remove_default_vhost: true
#      nginx_upstreams:
#        - name: _OnlinePythonTutor
#          servers:
#            - 127.0.0.1:8003
#            #- unix:////run/uwsgi/app/OnlinePythonTutor/socket
      nginx_vhosts:
        #
        - listen: "80 default_server"
          server_name: "_"
          root: "/var/www/html"
          index: "index.php index.html index.htm index.nginx-debian.html"
          error_log: ""
          state: "present"
          template: "{{ nginx_vhost_template }}"
          filename: "default.conf"
          extra_parameters: |
            location / {
                try_files $uri $uri/ /index.html /index.php;
            }
            location ~ ^/~(?<userdir_user>[\w-]+)(?<userdir_uri>/.*)?$ {
                alias /home/$userdir_user/www$userdir_uri;
            	# autoindex on;
                location ~ [^/]\.php(/|$) {
                    include fastcgi_params;
                    fastcgi_index index.php;
                    # check if requested PHP file really exists
                    if (!-f $request_filename) {
                        return 404;
                    }
                    #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                    fastcgi_split_path_info ^(.+\.php)(/.+)$;
                    fastcgi_param SCRIPT_FILENAME $request_filename;
                    fastcgi_pass 127.0.0.1:9000;
                }
            }
            location ~ [^/]\.php$ {
                include fastcgi_params;
                fastcgi_index index.php;
                # check if requested PHP file really exists
                if (!-f $request_filename) {
                    return 404;
                }
                #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_param SCRIPT_FILENAME $request_filename;
                fastcgi_pass 127.0.0.1:9000;
            }
            # deny access to .htaccess files, if Apache's document root
            # concurs with nginx's one
            location ~ /\.ht {
                deny all;
            }
            location /_OPT {
                try_files $uri @uwsgi;
            }
            location @uwsgi {
                rewrite  ^/_OPT/(.*) /$1 break;
                include uwsgi_params;
                #uwsgi_pass /run/uwsgi/app/OnlinePythonTutor/socket;
                uwsgi_pass localhost:8003;
            }
            ## Begin - Security
            # deny all direct access for these folders
            location ~* /(.git|cache|bin|logs|backups|tests)/.*$ { return 403; }
            # deny running scripts inside core system folders
            location ~* /(system|vendor)/.*\.(txt|xml|md|html|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }
            # deny running scripts inside user folder
            location ~* /user/.*\.(txt|md|yaml|php|pl|py|cgi|twig|sh|bat)$ { return 403; }
            # deny access to specific files in the root folder
            location ~ /(LICENSE.txt|composer.lock|composer.json|nginx.conf|web.config|htaccess.txt|\.htaccess) { return 403; }
      tags:
        - db_mysql

    - role: geerlingguy.php
      become: yes
      php_webserver_daemon: "nginx"
      php_enable_php_fpm: true
      tags:
        - db_mysql


    - role: geerlingguy.php-mysql
      become: yes
      tags:
        - db_mysql


    - role: greendayonfire.mongodb
      become: yes
      mongodb_security_authorization: "enabled"
      mongodb_users:
      - name: "{{db_user.name}}"
        password: "{{db_user.password}}"
        roles: readWrite
        database: app_development
      tags:
        - no_sql

    # Install Docker
    - role: angstwad.docker_ubuntu
      become: yes
      docker_group_members:
        - vagrant
      tags:
        - docker

#    # Install Kubernetes
#    - role: gantsign.kubernetes
#      become: yes
#      tags:
#        - kubernetes
#        - docker
#      kubernetes_node_type: admin

    # Install Molecule for testing Ansible roles & playbooks
    - role: gantsign.molecule
      become: yes
      molecule_version: "{{package_version.molecule_version}}"
      tags:
        - docker
        - molecule

    - role: wtanaka.vagrant
      become: yes
      vagrant_url: "https://releases.hashicorp.com/vagrant/{{package_version.vagrant}}/vagrant_{{package_version.vagrant}}_x86_64.deb"
      tags:
        - vagrant


  tasks:
    - name: "Install needed packages"
      become: yes
      apt:
        name: "{{ item }}"
        state: installed
        update_cache: yes
        cache_valid_time: 3600
      with_items:
        - git
        - git-flow
        - build-essential
        - automake
        - wget
        - curl
        - vim
        - screen
        - htop
        - tree
        - sqlite
        - lvm2
        - python3
        - python3-pip
        - python3-virtualenv
        - python3-dev
        - python3-pexpect
        - python-pexpect
        - python3-winrm
        - python-winrm
        - libffi-dev
        - libssl-dev
        - cowsay
        - sshpass
        - avahi-daemon
        - avahi-utils
        - nmap
        - whois
        - proftpd-basic

    - name: Install Python packages
      become: yes
      pip:
          name: "{{item}}"
          executable: pip3
      with_items:
        - pytest
        - pytest-pep8
        - flask
        - matplotlib
        - numpy
        - scipy
        - music21
      tags:
        - pythone-dev

    - name: Git config
      git_config:
        name: "{{item.name}}"
        value: "{{item.value}}"
        scope: global
      with_items:
        - name: "user.email"
          value: "vagrant@example.com"
        - name: "user.name"
          value: "vagrant"
        - name: "core.editor"
          value: "vim"
        - name: "push.default"
          value: "simple"
      tags:
        - git

    - name: Desktop Block
      block:
      - name: "Install desktop needed packages"
        become: yes
        apt:
            name: "{{ item }}"
            state: installed
            update_cache: yes
            cache_valid_time: 3600
        with_items:
            - hunspell-de-ch
            - wogerman
            - hunspell-de-at
            - hunspell-en-us
            - wbritish
            - hunspell-de-de
            - language-pack-gnome-de
            - wngerman
            - hunspell-en-au
            - wswiss
            - hunspell-en-za
            - hunspell-en-ca
            - wamerican
            - hunspell-en-gb
            - file-roller
            - clang
            - texworks

      - name: Deactivate powweroff dialog
        command: "{{item}}"
        with_items:
            # - "gsettings set com.canonical.indicator.session suppress-logout-restart-shutdown true"
            - "gsettings set org.gnome.settings-daemon.plugins.power button-power 'shutdown'"
      tags:
        - desktop

    - name: Electronic and Digital
      block:
        - name: Install Electronic packages
          become: yes
          apt:
            name: "{{ item }}"
            state: installed
            update_cache: yes
            cache_valid_time: 3600
          with_items:
            - logisim
            - gtkwave
            - gnat
            - kicad
            - pcb
            - geda
            - geda-utils
            - geda-examples
            - gerbv
            - avr-libc
            - avrdude
            - binutils-avr
            - gcc-avr
            - libftdi1
            - libjna-java
            - libjna-jni
            - librxtx-java
            - libqt5printsupport5
            - libqt5serialport5
            - libqt5sql5
            - libqt5sql5-sqlite
            - libqt5xml5
            - xclip
        - name: Lookup for ghdl
          stat:
            path: /usr/local/bin/ghdl
          register: ghdl
        - name: Clone ghdl
          git:
              dest: /tmp/ghdl
              repo: https://github.com/ghdl/ghdl.git
          register: ghdl_clone
          when: ghdl.stat.exists == False

        - name: Create build in ghdl
          file:
              path: /tmp/ghdl/build
              state: directory
          when: ghdl_clone.changed

        - name: Configure ghdl
          command: ../configure --prefix=/opt/ghdl
          args:
              chdir: /tmp/ghdl/build
          when: ghdl_clone.changed
        - name: Make ghdl
          become: yes
          command: '/bin/bash -l -c /usr/bin/make'
          args:
              chdir: /tmp/ghdl/build
          when: ghdl_clone.changed
        - name: Make install ghdl
          become: yes
          command: make install
          args:
              chdir: /tmp/ghdl/build
          when: ghdl_clone.changed
        - name: Link to ghdl
          become: yes
          file:
            src: /opt/ghdl/bin/ghdl
            dest: /usr/local/bin/ghdl
            state: link
        - name: Create electronic dirs
          become: yes
          file:
              path: "/opt/{{item}}"
              state: directory
          with_items:
            - arduino
            - fritzing
        - name: Get Fritzing
          become: yes
          unarchive:
              src: http://fritzing.org/media/downloads/fritzing-0.9.3b.linux.AMD64.tar.bz2
              # If remote_src=no (default), local path to archive file to copy to the target server; can be absolute or relative. If remote_src=yes, path on the target server to existing archive file to unpack.,If remote_src=yes and src contains ://, the remote machine will download the file from the url first. (version_added 2.0)
              dest: /opt/fritzing
              # Remote absolute path where the archive should be unpacked
              group: # name of the group that should own the file/directory, as would be fed to I(chown)
              remote_src: yes
              # Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.,This option is mutually exclusive with C(copy).
              extra_opts:
                - "--strip-components=1"
              # Specify additional options by passing in an array.
              creates: /opt/fritzing/Fritzing
        - name: Create applications directory
          file:
            path: "{{ansible_user_dir}}/.local/share/applications/"
            state: directory
        - name: Install Fritzing desktop
          template:
            dest: "{{ansible_user_dir}}/.local/share/applications/fritzing.desktop"
            src: /tmp/fritzing.desktop
        - name: Get arduino IDE
          become: yes
          unarchive:
              src: https://downloads.arduino.cc/arduino-1.8.5-linux64.tar.xz
              # If remote_src=no (default), local path to archive file to copy to the target server; can be absolute or relative. If remote_src=yes, path on the target server to existing archive file to unpack.,If remote_src=yes and src contains ://, the remote machine will download the file from the url first. (version_added 2.0)
              dest: /opt/arduino
              # Remote absolute path where the archive should be unpacked
              group: # name of the group that should own the file/directory, as would be fed to I(chown)
              remote_src: yes
              # Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.,This option is mutually exclusive with C(copy).
              extra_opts:
                - "--strip-components=1"
              # Specify additional options by passing in an array.
              creates: /opt/arduino/arduino
          register: arduino
        - name: Installation prerequisites for Linux for mystorm
          become: yes
          apt:
            name: "{{item}}"
            cache_valid_time: 3600
          with_items:
            - build-essential
            - clang
            - bison
            - flex
            - libreadline-dev
            - gawk
            - tcl-dev
            - libffi-dev
            - git
            - mercurial
            - graphviz
            - xdot
            - pkg-config
            - python
            - python3
            - libftdi-dev
            - vim
            - htop
            - screen
            - iverilog
            - wine
        - name: Create hidden bin
          file:
            path: "{{ansible_user_dir}}/.bin/icestudio"
            state: directory
        - name: Downloading of IceStorm for linux
          git:
            dest: "{{ansible_user_dir}}/.bin/{{item.dest}}"
            repo: "{{item.repo}}"
          with_items:
            - repo: https://github.com/cliffordwolf/icestorm.git
              dest: icestorm
            - repo: https://github.com/cseed/arachne-pnr.git
              dest: arachne-pnr
            - repo: https://github.com/cliffordwolf/yosys.git
              dest: yosys
            - repo: https://github.com/myhdl/myhdl.git
              dest: myhdl
        - name: Install myhdl
          become: yes
          command: python3 setup.py install
          args:
            creates: "/usr/local/lib/python3.5/dist-packages/{{item}}*"
            chdir: "{{ansible_user_dir}}/.bin/{{item}}"
          with_items:
            - myhdl
        - name: Downloading mystorm tutorial
          git:
            dest: "{{ansible_user_dir}}/Dokumente/{{item.dest}}"
            repo: "{{item.repo}}"
          with_items:
            - repo: https://github.com/mystorm-org/Guide.git
              dest: mystorm-Guide
            - repo: https://github.com/mystorm-org/BlackIce-II.git
              dest: BlackIce-II
        - name: Makeing of IceStorm for linux
          make:
            chdir: "{{ansible_user_dir}}/.bin/{{item}}"
          with_items:
            - icestorm
          register: icestorm
        - name: Instalation of IceStorm for linux
          become: yes
          make:
            target: install
            chdir: "{{ansible_user_dir}}/.bin/{{item}}"
          when: icestorm.changed
          with_items:
            - icestorm
        - name: Makeing II of IceStorm for linux
          make:
            chdir: "{{ansible_user_dir}}/.bin/{{item}}"
          register: arachne
          with_items:
            - arachne-pnr
        - name: Install II of IceStorm for linux
          become: yes
          make:
            target: install
            chdir: "{{ansible_user_dir}}/.bin/{{item}}"
          when: arachne.changed
          with_items:
            - arachne-pnr
        - name: Makeing III of IceStorm for linux
          make:
            target: all
            chdir: "{{ansible_user_dir}}/.bin/{{item}}"
          register: yosys
          with_items:
            - yosys
        - name: Install III of IceStorm for linux
          become: yes
          make:
            target: install
            chdir: "{{ansible_user_dir}}/.bin/{{item}}"
          when: yosys.changed
          with_items:
            - yosys
        - name: Get icestudio IDE
          unarchive:
              src: https://github.com/FPGAwars/icestudio/releases/download/0.3.2-beta/icestudio-0.3.2-beta-linux64.zip
              # If remote_src=no (default), local path to archive file to copy to the target server; can be absolute or relative. If remote_src=yes, path on the target server to existing archive file to unpack.,If remote_src=yes and src contains ://, the remote machine will download the file from the url first. (version_added 2.0)
              dest: "{{ansible_user_dir}}/.bin/icestudio"
              # Remote absolute path where the archive should be unpacked
              group: # name of the group that should own the file/directory, as would be fed to I(chown)
              remote_src: yes
              # Set to C(yes) to indicate the archived file is already on the remote system and not local to the Ansible controller.,This option is mutually exclusive with C(copy).
              #extra_opts:
              #  - "--strip-components=1"
              # Specify additional options by passing in an array.
              creates: "{{ansible_user_dir}}/.bin/icestudio/icestudio-0.3.2-beta-linux64"
          register: icestudio
        - name: Create electronic links
          become: yes
          file:
              src: "/opt/{{item.src}}/{{item.bin}}"
              dest: "/usr/bin/{{item.bin}}"
              state: link
          with_items:
            - src: arduino
              bin: arduino
            - src: fritzing
              bin: Fritzing
        - name: Install arduino on desktop
          become: yes
          command: /opt/arduino/install.sh
          when: arduino.changed
        - get_url:
            dest: /tmp/linux_installer.sh
            url: https://raw.githubusercontent.com/FPGAwars/icestudio/develop/scripts/linux_installer.sh
            mode: 0760
        - name: Install icestudio on desktop
          expect:
            command: /tmp/linux_installer.sh
            responses:
              Enter the Icestudio path: "{{ansible_user_dir}}/.bin/icestudio/icestudio-0.3.2-beta-linux64"
            creates: "{{ansible_user_dir}}/.local/share/applications/icestudio.desktop"
            timeout: 30
        - name: Member of dialout
          become: yes
          user:
              name: vagrant
              groups: dialout
              # Puts the user in this comma-delimited list of groups. When set to the empty string ('groups='), the user is removed from all groups except the primary group.
              append: yes
              # If C(yes), will only add groups, not set them to just the list in I(groups).
        - name: Right for user
          become: yes
          command: "chown -R {{ansible_user_id}}:{{ansible_user_gid}} {{ansible_user_dir}}/"
      tags:
        - ghdl
        - electronic
        - desktop

    - block:
      - name: Install ppa lxc
        become: yes
        apt_repository:
          repo: ppa:ubuntu-lxc/lxc-stable
          state: present # A source string state.
          update_cache: yes

      - name: "Install lxc-dev needed packages"
        become: yes
        apt:
          name: "{{ item }}"
          state: installed
          update_cache: yes
          cache_valid_time: 3600
        with_items:
          - lxc
          - lxd
          - python-lxc
          - openvswitch-switch
          - lvm2
          - btrfs-tools
          - zfsutils-linux
          - libvirt-bin
          - libvirt-dev
          - python-libvirt
          - python3-libvirt
          - virtinst
          - cgmanager
          - cgroup-lite
          - debootstrap
          - bridge-utils
          - yum
          - rpm
          # - zypper
          - qemu-user-static
          - haproxy
          - open-iscsi
          - redis-server
          - rabbitmq-server

      - name: "Extend ubuntu template"
        become: yes
        replace:
            regexp: "apt-transport-https,ssh,vim"
            # The regular expression to look for in the contents of the file.
            # Uses Python regular expressions;
            # see U(http://docs.python.org/2/library/re.html).
            # Uses multiline mode, which means C(^) and C($) match the beginning
            # and end respectively of I(each line) of the file.
            dest: "/usr/share/lxc/templates/lxc-ubuntu"
            # The file to modify.
            replace: "apt-transport-https,ssh,vim,manpages,man-db,bash-completion,whois,python,python-apt,dnsutils"

      - name: Create a stopped container
        become: yes
        lxc_container:
          name: "{{container_prefix}}{{item}}"
          container_log: true
          template: "{{item}}"
          state: stopped
        with_items: "{{lxc_templates}}"
        ignore_errors: yes

      - name: Remove container
        become: yes
        lxc_container:
          name: "{{container_prefix}}{{item}}"
          container_log: true
          template: "{{item}}"
          state: absent
        with_items: "{{lxc_templates}}"
        ignore_errors: yes
      - name: Clone web panel
        git:
          dest: "{{ansible_user_dir}}/rdf/bsa/lxc-web-panel"
          repo: https://github.com/claudyus/LXC-Web-Panel.git
      - name: Install lxc web panel dependencies
        become: yes
        apt:
          name: "{{item}}"
        with_items:
          - python-tz
          - libsasl2-dev
          - libldap2-dev
          - fabric
          - python-pam
          - python-flask
      - name: build lxc web pannel
        command: fab build_assets
        args:
          chdir: "{{ansible_user_dir}}/rdf/bsa/lxc-web-panel"
      - name: build lxc web pannel partII
        become: yes
        command: ./setup.py develop
        args:
          chdir: "{{ansible_user_dir}}/rdf/bsa/lxc-web-panel"
      - name: Create file for lxc web pannel
        become: yes
        file:
          path: "/{{item}}/lwp"
          state: directory
        with_items:
          - etc
          - var
      - name: Copy files
        become: yes
        copy:
          src: "{{item.src}}"
          dest: "{{item.dest}}"
        with_items:
          - src: "{{ansible_user_dir}}/rdf/bsa/lxc-web-panel/lwp.example.conf"
            dest: /etc/lwp/lwp.conf
          - src: "{{ansible_user_dir}}/rdf/bsa/lxc-web-panel/lwp.db"
            dest: /var/lwp/lwp.db
      tags:
        - lxc-dev

    - block:
        - name: pull an docker images
          become: yes
          docker_image:
            name: "{{item}}"
          with_items:
            - gitlab/gitlab-ce

        - name: Start gitlab container
          become: yes
          docker_container:
            name: gitlab
            hostname: gitlab.rdf-dev
            image: gitlab/gitlab-ce
            state: started
            detach: yes
            restart_policy: always
            ports:
              - "8443:443"
              - "8080:80"
              - "2222:22"
            volumes:
              - /vagrant/gitlab/config:/etc/gitlab
              - /vagrant/gitlab/logs:/var/log/gitlab
              - /vagrant/gitlab/data:/var/opt/gitlab
          tags:
            - not_packer
      tags:
         - docker
         - gitlab

    - name: configure screen
      become: yes
      lineinfile:
         path: /etc/screenrc
         regexp: '^caption always'
         line: 'caption always "%{rw} * | %H * $LOGNAME | %{bw}%c %D | %{-}%-Lw%{rw}%50>%{rW}%n%f* %t %{-}%+Lw%<"'

    - name: configure bashrc with screen
      blockinfile:
        path: /home/vagrant/.bashrc
        block: |
           if [ "$TERM" != "screen" ] && [ "$SSH_CONNECTION" != "" ]; then
             /usr/bin/screen -ls sshscreen || /usr/bin/screen -dmS sshscreen
             echo "SSH no active"
             /usr/bin/screen -S sshscreen -D -RR  && exit
           fi

    - block:
        - name: Ensure rdf directories exists
          become: yes
          file:
            path: "/home/vagrant/rdf/{{item}}"
            state: directory
            owner: vagrant
            group: vagrant
            recurse: yes
          with_items:
            - ais
            - bsa
            - itec
            - ina

        - name: Clone git for rdf
          git:
            dest: "/home/vagrant/rdf/{{item.path}}/{{item.repo}}"
            force: yes
            repo: "https://github.com/kraeml/{{item.repo}}.git"
            version: "{{item.version}}"
          with_items:
            - repo: hands-on-ansible
              path: ais
              version: master
            - repo: hands-on-bsa
              path: bsa
              version: master
            - repo: python_routine_aufgaben
              path: itec
              version: master
            - repo: hands-on-lxc
              path: ais
              version: master

        - name: OWC File Transfer
          unarchive:
              dest: "/home/vagrant/rdf/ina/"
              src: https://cloud.franken.de/owncloud/index.php/s/j0vW45mnASmJCFk/download
              creates: /home/vagrant/rdf/ina/hands-on-ina
              remote_src: yes
              exclude: ".git"
              keep_newer: yes
              owner: vagrant
              group: vagrant
          with_items:
            - src: /tmp/hands-on-ina
              path: ina/hands-on-ina

        - name: Get RDF files from owncloud
          get_url:
              dest: "/home/vagrant/rdf/{{item.dest}}"
              url: "{{item.url}}"
              owner: vagrant
              group: vagrant
          with_items:
            - url: https://cloud.franken.de/owncloud/index.php/s/Bg6uuMolM5SJha0/download
              dest: bsa/
            #- url: https://cloud.franken.de/owncloud/index.php/s/aqobZwzHykXmpii/download
            #  dest: itec/
      tags:
        - rdf

    - block:
        - name: Install phpmyadmin
          become: yes
          vars:
            version: "{{package_version.phpmyadmin}}"
          unarchive:
            src: https://files.phpmyadmin.net/phpMyAdmin/{{version}}/phpMyAdmin-{{version}}-all-languages.tar.gz
            dest: /var/www/html/
            owner: www-data
            group: www-data
            remote_src: yes

        - name: Link to phpmyadmin
          become: yes
          vars:
             version: "{{package_version.phpmyadmin}}"
          file:
            state: link
            src: /var/www/html/phpMyAdmin-{{version}}-all-languages
            dest: /var/www/html/phpmyadmin

        - name: Copy phpmyadmin config
          become: yes
          ignore_errors: true
          get_url:
            url: https://cloud.franken.de/owncloud/index.php/s/zPpINpJHLXwSb0u/download
            dest: /var/www/html/phpmyadmin/config.inc.php
            owner: www-data
            group: www-data
            mode: 0664
      tags:
        - db_mysql
        - phpmyadmin

    - name: Node-red block
      block:
        - name: Install nodered
          become: yes
          command: npm install -g --unsafe-perm node-red node-red-admin
          with_items:
              - node-red
              - node-red-admin
              - node-red-node-mongodb2
              - node-red-contrib-objectid
      tags:
        - node-red
        - nodejs

    - name: OnlinePythonTutor block
      block:
        - name: Install dependencies
          become: yes
          apt:
            name: "{{item}}"
            update_cache: yes
            cache_valid_time: 3600
          with_items:
            - uwsgi
            - uwsgi-plugin-python
            - nginx-full
        - name: Clone OnlinePythonTutor
          become: yes
          git:
              dest: /opt/OnlinePythonTutor
              # Absolute path of where the repository should be checked out to. This parameter is required, unless C(clone) is set to C(no) This change was made in version 1.8.3. Prior to this version, the C(dest) parameter was always required.
              repo: https://github.com/pgbovine/OnlinePythonTutor.git
              # git, SSH, or HTTP(S) protocol address of the git repository.
              clone: yes # If C(no), do not clone the repository if it does not exist locally
              recursive: yes # if C(no), repository will be cloned without the --recursive option, skipping sub-modules.
              update: yes
              force: yes
        - name: Install bottle via pip3
          become: yes
          pip:
              virtualenv: /opt/OnlinePythonTutor/venv
              # An optional path to a I(virtualenv) directory to install into. It cannot be specified together with the 'executable' parameter (added in 2.1). If the virtualenv does not exist, it will be created before installing packages. The optional virtualenv_site_packages, virtualenv_command, and virtualenv_python options affect the creation of the virtualenv.
              virtualenv_command: virtualenv
              # The command or a pathname to the command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv).
              chdir: /opt/OnlinePythonTutor
              # cd into this directory before running the command
              name: bottle
              # The name of a Python library to install or the url of the remote package.,As of 2.2 you can supply a list of names.
        - name: Install uwsgi ini
          become: yes
          template:
              src: /tmp/OnlinePythonTutor.ini
              # Path of a Jinja2 formatted template on the Ansible controller. This can be a relative or absolute path.
              dest: /etc/uwsgi/sites-available
              # Location to render the template to on the remote machine.
          notify: restart_uwsgi
          tags:
            - packer
        - name: Link for uwsgi
          become: yes
          file:
              src: /etc/uwsgi/sites-available
              dest: /etc/uwsgi/sites-enabled
              state: link
          notify: restart_uwsgi
      tags:
        - OnlinePythonTutor

  handlers:
    - name: restart_uwsgi
      become: yes
      service:
        name: uwsgi
        state: restarted
        enabled: yes
